(self.webpackChunkBlynkWebDashboard=self.webpackChunkBlynkWebDashboard||[]).push([[4106],{9705:(e,r,t)=>{"use strict";var n=t(1540);function o(e){var r=[1/0,1/0,-1/0,-1/0];return n.coordEach(e,(function(e){r[0]>e[0]&&(r[0]=e[0]),r[1]>e[1]&&(r[1]=e[1]),r[2]<e[0]&&(r[2]=e[0]),r[3]<e[1]&&(r[3]=e[1])})),r}o.default=o,r.Z=o},6646:(e,r,t)=>{"use strict";t.d(r,{Z:()=>m});var n=t(271);function o(e,r,t){if(null!==e)for(var n,i,a,u,s,l,c,f,g=0,y=0,d=e.type,h="FeatureCollection"===d,m="Feature"===d,v=h?e.features.length:1,p=0;p<v;p++){s=(f=!!(c=h?e.features[p].geometry:m?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var w=0;w<s;w++){var b=0,P=0;if(null!==(u=f?c.geometries[w]:c)){l=u.coordinates;var k=u.type;switch(g=!t||"Polygon"!==k&&"MultiPolygon"!==k?0:1,k){case null:break;case"Point":if(!1===r(l,y,p,b,P))return!1;y++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<l.length;n++){if(!1===r(l[n],y,p,b,P))return!1;y++,"MultiPoint"===k&&b++}"LineString"===k&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<l.length;n++){for(i=0;i<l[n].length-g;i++){if(!1===r(l[n][i],y,p,b,P))return!1;y++}"MultiLineString"===k&&b++,"Polygon"===k&&P++}"Polygon"===k&&b++;break;case"MultiPolygon":for(n=0;n<l.length;n++){for(P=0,i=0;i<l[n].length;i++){for(a=0;a<l[n][i].length-g;a++){if(!1===r(l[n][i][a],y,p,b,P))return!1;y++}P++}b++}break;case"GeometryCollection":for(n=0;n<u.geometries.length;n++)if(!1===o(u.geometries[n],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length&&!1!==r(e.features[t],t);t++);}function a(e,r){var t,n,o,i,a,u,s,l,c,f,g=0,y="FeatureCollection"===e.type,d="Feature"===e.type,h=y?e.features.length:1;for(t=0;t<h;t++){for(u=y?e.features[t].geometry:d?e.geometry:e,l=y?e.features[t].properties:d?e.properties:{},c=y?e.features[t].bbox:d?e.bbox:void 0,f=y?e.features[t].id:d?e.id:void 0,a=(s=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,o=0;o<a;o++)if(null!==(i=s?u.geometries[o]:u))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===r(i,g,l,c,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===r(i.geometries[n],g,l,c,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===r(null,g,l,c,f))return!1;g++}}function u(e){var r=[1/0,1/0,-1/0,-1/0];return o(e,(function(e){r[0]>e[0]&&(r[0]=e[0]),r[1]>e[1]&&(r[1]=e[1]),r[2]<e[0]&&(r[2]=e[0]),r[3]<e[1]&&(r[3]=e[1])})),r}u.default=u;const s=u;const l=function(e,r){void 0===r&&(r={});var t=s(e),o=(t[0]+t[2])/2,i=(t[1]+t[3])/2;return(0,n.xm)([o,i],r.properties,r)};var c=t(675),f=t(4490);function g(e,r,t,o){var i=e.properties||{},u="Feature"===e.type?e.geometry:e;if("GeometryCollection"===u.type){var s=[];return a(e,(function(e){var n=g(e,r,t,o);n&&s.push(n)})),(0,n.uf)(s)}var m=function(e){var r=l(e).geometry.coordinates,t=[-r[0],-r[1]];return(0,f.aM)().rotate(t).scale(n.rQ)}(u),v={type:u.type,coordinates:d(u.coordinates,m)},p=(new c.GeoJSONReader).read(v),w=(0,n.DL)((0,n.lF)(r,t),"meters"),b=c.BufferOp.bufferOp(p,w,o);if(!y((b=(new c.GeoJSONWriter).write(b)).coordinates)){var P={type:b.type,coordinates:h(b.coordinates,m)};return(0,n.zL)(P,i)}}function y(e){return Array.isArray(e[0])?y(e[0]):isNaN(e[0])}function d(e,r){return"object"!=typeof e[0]?r(e):e.map((function(e){return d(e,r)}))}function h(e,r){return"object"!=typeof e[0]?r.invert(e):e.map((function(e){return h(e,r)}))}const m=function(e,r,t){var o=(t=t||{}).units||"kilometers",u=t.steps||8;if(!e)throw new Error("geojson is required");if("object"!=typeof t)throw new Error("options must be an object");if("number"!=typeof u)throw new Error("steps must be an number");if(void 0===r)throw new Error("radius is required");if(u<=0)throw new Error("steps must be greater than 0");var s=[];switch(e.type){case"GeometryCollection":return a(e,(function(e){var t=g(e,r,o,u);t&&s.push(t)})),(0,n.uf)(s);case"FeatureCollection":return i(e,(function(e){var t=g(e,r,o,u);t&&i(t,(function(e){e&&s.push(e)}))})),(0,n.uf)(s)}return g(e,r,o,u)}},1037:(e,r,t)=>{"use strict";t.d(r,{Z:()=>i});var n=t(271);function o(e,r,t){if(null!==e)for(var n,i,a,u,s,l,c,f,g=0,y=0,d=e.type,h="FeatureCollection"===d,m="Feature"===d,v=h?e.features.length:1,p=0;p<v;p++){s=(f=!!(c=h?e.features[p].geometry:m?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var w=0;w<s;w++){var b=0,P=0;if(null!==(u=f?c.geometries[w]:c)){l=u.coordinates;var k=u.type;switch(g=!t||"Polygon"!==k&&"MultiPolygon"!==k?0:1,k){case null:break;case"Point":if(!1===r(l,y,p,b,P))return!1;y++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<l.length;n++){if(!1===r(l[n],y,p,b,P))return!1;y++,"MultiPoint"===k&&b++}"LineString"===k&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<l.length;n++){for(i=0;i<l[n].length-g;i++){if(!1===r(l[n][i],y,p,b,P))return!1;y++}"MultiLineString"===k&&b++,"Polygon"===k&&P++}"Polygon"===k&&b++;break;case"MultiPolygon":for(n=0;n<l.length;n++){for(P=0,i=0;i<l[n].length;i++){for(a=0;a<l[n][i].length-g;a++){if(!1===r(l[n][i][a],y,p,b,P))return!1;y++}P++}b++}break;case"GeometryCollection":for(n=0;n<u.geometries.length;n++)if(!1===o(u.geometries[n],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}const i=function(e,r){void 0===r&&(r={});var t=0,i=0,a=0;return o(e,(function(e){t+=e[0],i+=e[1],a++}),!0),(0,n.xm)([t/a,i/a],r.properties)}},271:(e,r,t)=>{"use strict";t.d(r,{rQ:()=>n,zL:()=>i,xm:()=>a,yu:()=>u,Tu:()=>s,uf:()=>l,DL:()=>c,lF:()=>f});var n=6371008.8,o={centimeters:100*n,centimetres:100*n,degrees:n/111325,feet:3.28084*n,inches:39.37*n,kilometers:n/1e3,kilometres:n/1e3,meters:n,metres:n,miles:n/1609.344,millimeters:1e3*n,millimetres:1e3*n,nauticalmiles:n/1852,radians:1,yards:1.0936*n};function i(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function a(e,r,t){if(void 0===t&&(t={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!g(e[0])||!g(e[1]))throw new Error("coordinates must contain numbers");return i({type:"Point",coordinates:e},r,t)}function u(e,r,t){void 0===t&&(t={});for(var n=0,o=e;n<o.length;n++){var a=o[n];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<a[a.length-1].length;u++)if(a[a.length-1][u]!==a[0][u])throw new Error("First and last Position are not equivalent.")}return i({type:"Polygon",coordinates:e},r,t)}function s(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return i({type:"LineString",coordinates:e},r,t)}function l(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function c(e,r){void 0===r&&(r="kilometers");var t=o[r];if(!t)throw new Error(r+" units is invalid");return e*t}function f(e,r){void 0===r&&(r="kilometers");var t=o[r];if(!t)throw new Error(r+" units is invalid");return e/t}function g(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}},4102:(e,r)=>{"use strict";function t(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function n(e,r,n){if(void 0===n&&(n={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!y(e[0])||!y(e[1]))throw new Error("coordinates must contain numbers");return t({type:"Point",coordinates:e},r,n)}function o(e,r,n){void 0===n&&(n={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<a[a.length-1].length;u++)if(a[a.length-1][u]!==a[0][u])throw new Error("First and last Position are not equivalent.")}return t({type:"Polygon",coordinates:e},r,n)}function i(e,r,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return t({type:"LineString",coordinates:e},r,n)}function a(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function u(e,r,n){return void 0===n&&(n={}),t({type:"MultiLineString",coordinates:e},r,n)}function s(e,r,n){return void 0===n&&(n={}),t({type:"MultiPoint",coordinates:e},r,n)}function l(e,r,n){return void 0===n&&(n={}),t({type:"MultiPolygon",coordinates:e},r,n)}function c(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e*n}function f(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e/n}function g(e){return 180*(e%(2*Math.PI))/Math.PI}function y(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.earthRadius=6371008.8,r.factors={centimeters:100*r.earthRadius,centimetres:100*r.earthRadius,degrees:r.earthRadius/111325,feet:3.28084*r.earthRadius,inches:39.37*r.earthRadius,kilometers:r.earthRadius/1e3,kilometres:r.earthRadius/1e3,meters:r.earthRadius,metres:r.earthRadius,miles:r.earthRadius/1609.344,millimeters:1e3*r.earthRadius,millimetres:1e3*r.earthRadius,nauticalmiles:r.earthRadius/1852,radians:1,yards:1.0936*r.earthRadius},r.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/r.earthRadius,yards:1.0936133},r.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,hectares:1e-4,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},r.feature=t,r.geometry=function(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return n(r).geometry;case"LineString":return i(r).geometry;case"Polygon":return o(r).geometry;case"MultiPoint":return s(r).geometry;case"MultiLineString":return u(r).geometry;case"MultiPolygon":return l(r).geometry;default:throw new Error(e+" is invalid")}},r.point=n,r.points=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return n(e,r)})),t)},r.polygon=o,r.polygons=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return o(e,r)})),t)},r.lineString=i,r.lineStrings=function(e,r,t){return void 0===t&&(t={}),a(e.map((function(e){return i(e,r)})),t)},r.featureCollection=a,r.multiLineString=u,r.multiPoint=s,r.multiPolygon=l,r.geometryCollection=function(e,r,n){return void 0===n&&(n={}),t({type:"GeometryCollection",geometries:e},r,n)},r.round=function(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t},r.radiansToLength=c,r.lengthToRadians=f,r.lengthToDegrees=function(e,r){return g(f(e,r))},r.bearingToAzimuth=function(e){var r=e%360;return r<0&&(r+=360),r},r.radiansToDegrees=g,r.degreesToRadians=function(e){return e%360*Math.PI/180},r.convertLength=function(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return c(f(e,r),t)},r.convertArea=function(e,t,n){if(void 0===t&&(t="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=r.areaFactors[t];if(!o)throw new Error("invalid original units");var i=r.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},r.isNumber=y,r.isObject=function(e){return!!e&&e.constructor===Object},r.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!y(e))throw new Error("bbox must only contain numbers")}))},r.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}},8468:(e,r,t)=>{"use strict";t.d(r,{Z:()=>f});var n=t(271);function o(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function i(e,r){var t,n,o,i,a,u,s,l,c,f,g=0,y="FeatureCollection"===e.type,d="Feature"===e.type,h=y?e.features.length:1;for(t=0;t<h;t++){for(u=y?e.features[t].geometry:d?e.geometry:e,l=y?e.features[t].properties:d?e.properties:{},c=y?e.features[t].bbox:d?e.bbox:void 0,f=y?e.features[t].id:d?e.id:void 0,a=(s=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,o=0;o<a;o++)if(null!==(i=s?u.geometries[o]:u))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===r(i,g,l,c,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===r(i.geometries[n],g,l,c,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===r(null,g,l,c,f))return!1;g++}}function a(e,r){i(e,(function(e,t,o,i,a){var u,s=null===e?null:e.type;switch(s){case null:case"Point":case"LineString":case"Polygon":return!1!==r((0,n.zL)(e,o,{bbox:i,id:a}),t,0)&&void 0}switch(s){case"MultiPoint":u="Point";break;case"MultiLineString":u="LineString";break;case"MultiPolygon":u="Polygon"}for(var l=0;l<e.coordinates.length;l++){var c={type:u,coordinates:e.coordinates[l]};if(!1===r((0,n.zL)(c,o),t,l))return!1}}))}const u=function(e){if(!e)throw new Error("geojson is required");var r=[];return a(e,(function(e){!function(e,r){var t=[],i=e.geometry;if(null!==i){switch(i.type){case"Polygon":t=o(i);break;case"LineString":t=[o(i)]}t.forEach((function(t){(function(e,r){var t=[];return e.reduce((function(e,o){var i,a,u,s,l,c,f=(0,n.Tu)([e,o],r);return f.bbox=(a=o,u=(i=e)[0],s=i[1],l=a[0],c=a[1],[u<l?u:l,s<c?s:c,u>l?u:l,s>c?s:c]),t.push(f),o})),t})(t,e.properties).forEach((function(e){e.id=r.length,r.push(e)}))}))}}(e,r)})),(0,n.uf)(r)};function s(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length&&!1!==r(e.features[t],t);t++);}var l=t(1787);function c(e,r){var t=o(e),i=o(r);if(2!==t.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==i.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var a=t[0][0],u=t[0][1],s=t[1][0],l=t[1][1],c=i[0][0],f=i[0][1],g=i[1][0],y=i[1][1],d=(y-f)*(s-a)-(g-c)*(l-u),h=(g-c)*(u-f)-(y-f)*(a-c),m=(s-a)*(u-f)-(l-u)*(a-c);if(0===d)return null;var v=h/d,p=m/d;if(v>=0&&v<=1&&p>=0&&p<=1){var w=a+v*(s-a),b=u+v*(l-u);return(0,n.xm)([w,b])}return null}const f=function(e,r){var t={},i=[];if("LineString"===e.type&&(e=(0,n.zL)(e)),"LineString"===r.type&&(r=(0,n.zL)(r)),"Feature"===e.type&&"Feature"===r.type&&null!==e.geometry&&null!==r.geometry&&"LineString"===e.geometry.type&&"LineString"===r.geometry.type&&2===e.geometry.coordinates.length&&2===r.geometry.coordinates.length){var a=c(e,r);return a&&i.push(a),(0,n.uf)(i)}var f=l();return f.load(u(r)),s(u(e),(function(e){s(f.search(e),(function(r){var n=c(e,r);if(n){var a=o(n).join(",");t[a]||(t[a]=!0,i.push(n))}}))})),(0,n.uf)(i)}},1540:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(4102);function o(e,r,t){if(null!==e)for(var n,i,a,u,s,l,c,f,g=0,y=0,d=e.type,h="FeatureCollection"===d,m="Feature"===d,v=h?e.features.length:1,p=0;p<v;p++){s=(f=!!(c=h?e.features[p].geometry:m?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var w=0;w<s;w++){var b=0,P=0;if(null!==(u=f?c.geometries[w]:c)){l=u.coordinates;var k=u.type;switch(g=!t||"Polygon"!==k&&"MultiPolygon"!==k?0:1,k){case null:break;case"Point":if(!1===r(l,y,p,b,P))return!1;y++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<l.length;n++){if(!1===r(l[n],y,p,b,P))return!1;y++,"MultiPoint"===k&&b++}"LineString"===k&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<l.length;n++){for(i=0;i<l[n].length-g;i++){if(!1===r(l[n][i],y,p,b,P))return!1;y++}"MultiLineString"===k&&b++,"Polygon"===k&&P++}"Polygon"===k&&b++;break;case"MultiPolygon":for(n=0;n<l.length;n++){for(P=0,i=0;i<l[n].length;i++){for(a=0;a<l[n][i].length-g;a++){if(!1===r(l[n][i][a],y,p,b,P))return!1;y++}P++}b++}break;case"GeometryCollection":for(n=0;n<u.geometries.length;n++)if(!1===o(u.geometries[n],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,r){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length&&!1!==r(e.features[t].properties,t);t++);break;case"Feature":r(e.properties,0)}}function a(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length&&!1!==r(e.features[t],t);t++);}function u(e,r){var t,n,o,i,a,u,s,l,c,f,g=0,y="FeatureCollection"===e.type,d="Feature"===e.type,h=y?e.features.length:1;for(t=0;t<h;t++){for(u=y?e.features[t].geometry:d?e.geometry:e,l=y?e.features[t].properties:d?e.properties:{},c=y?e.features[t].bbox:d?e.bbox:void 0,f=y?e.features[t].id:d?e.id:void 0,a=(s=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,o=0;o<a;o++)if(null!==(i=s?u.geometries[o]:u))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===r(i,g,l,c,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===r(i.geometries[n],g,l,c,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===r(null,g,l,c,f))return!1;g++}}function s(e,r){u(e,(function(e,t,o,i,a){var u,s=null===e?null:e.type;switch(s){case null:case"Point":case"LineString":case"Polygon":return!1!==r(n.feature(e,o,{bbox:i,id:a}),t,0)&&void 0}switch(s){case"MultiPoint":u="Point";break;case"MultiLineString":u="LineString";break;case"MultiPolygon":u="Polygon"}for(var l=0;l<e.coordinates.length;l++){var c={type:u,coordinates:e.coordinates[l]};if(!1===r(n.feature(c,o),t,l))return!1}}))}function l(e,r){s(e,(function(e,t,i){var a=0;if(e.geometry){var u=e.geometry.type;if("Point"!==u&&"MultiPoint"!==u){var s,l=0,c=0,f=0;return!1!==o(e,(function(o,u,g,y,d){if(void 0===s||t>l||y>c||d>f)return s=o,l=t,c=y,f=d,void(a=0);var h=n.lineString([s,o],e.properties);if(!1===r(h,t,i,d,a))return!1;a++,s=o}))&&void 0}}}))}function c(e,r){if(!e)throw new Error("geojson is required");s(e,(function(e,t,o){if(null!==e.geometry){var i=e.geometry.type,a=e.geometry.coordinates;switch(i){case"LineString":if(!1===r(e,t,o,0,0))return!1;break;case"Polygon":for(var u=0;u<a.length;u++)if(!1===r(n.lineString(a[u],e.properties),t,o,u))return!1}}}))}r.coordEach=o,r.coordReduce=function(e,r,t,n){var i=t;return o(e,(function(e,n,o,a,u){i=0===n&&void 0===t?e:r(i,e,n,o,a,u)}),n),i},r.propEach=i,r.propReduce=function(e,r,t){var n=t;return i(e,(function(e,o){n=0===o&&void 0===t?e:r(n,e,o)})),n},r.featureEach=a,r.featureReduce=function(e,r,t){var n=t;return a(e,(function(e,o){n=0===o&&void 0===t?e:r(n,e,o)})),n},r.coordAll=function(e){var r=[];return o(e,(function(e){r.push(e)})),r},r.geomEach=u,r.geomReduce=function(e,r,t){var n=t;return u(e,(function(e,o,i,a,u){n=0===o&&void 0===t?e:r(n,e,o,i,a,u)})),n},r.flattenEach=s,r.flattenReduce=function(e,r,t){var n=t;return s(e,(function(e,o,i){n=0===o&&0===i&&void 0===t?e:r(n,e,o,i)})),n},r.segmentEach=l,r.segmentReduce=function(e,r,t){var n=t,o=!1;return l(e,(function(e,i,a,u,s){n=!1===o&&void 0===t?e:r(n,e,i,a,u,s),o=!0})),n},r.lineEach=c,r.lineReduce=function(e,r,t){var n=t;return c(e,(function(e,o,i,a){n=0===o&&void 0===t?e:r(n,e,o,i,a)})),n},r.findSegment=function(e,r){if(r=r||{},!n.isObject(r))throw new Error("options is invalid");var t,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,u=r.segmentIndex||0,s=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),s=s||e.features[o].properties,t=e.features[o].geometry;break;case"Feature":s=s||e.properties,t=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":t=e;break;default:throw new Error("geojson is invalid")}if(null===t)return null;var l=t.coordinates;switch(t.type){case"Point":case"MultiPoint":return null;case"LineString":return u<0&&(u=l.length+u-1),n.lineString([l[u],l[u+1]],s,r);case"Polygon":return a<0&&(a=l.length+a),u<0&&(u=l[a].length+u-1),n.lineString([l[a][u],l[a][u+1]],s,r);case"MultiLineString":return i<0&&(i=l.length+i),u<0&&(u=l[i].length+u-1),n.lineString([l[i][u],l[i][u+1]],s,r);case"MultiPolygon":return i<0&&(i=l.length+i),a<0&&(a=l[i].length+a),u<0&&(u=l[i][a].length-u-1),n.lineString([l[i][a][u],l[i][a][u+1]],s,r)}throw new Error("geojson is invalid")},r.findPoint=function(e,r){if(r=r||{},!n.isObject(r))throw new Error("options is invalid");var t,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,u=r.coordIndex||0,s=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),s=s||e.features[o].properties,t=e.features[o].geometry;break;case"Feature":s=s||e.properties,t=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":t=e;break;default:throw new Error("geojson is invalid")}if(null===t)return null;var l=t.coordinates;switch(t.type){case"Point":return n.point(l,s,r);case"MultiPoint":return i<0&&(i=l.length+i),n.point(l[i],s,r);case"LineString":return u<0&&(u=l.length+u),n.point(l[u],s,r);case"Polygon":return a<0&&(a=l.length+a),u<0&&(u=l[a].length+u),n.point(l[a][u],s,r);case"MultiLineString":return i<0&&(i=l.length+i),u<0&&(u=l[i].length+u),n.point(l[i][u],s,r);case"MultiPolygon":return i<0&&(i=l.length+i),a<0&&(a=l[i].length+a),u<0&&(u=l[i][a].length-u),n.point(l[i][a][u],s,r)}throw new Error("geojson is invalid")}}}]);